(function() {var implementors = {};
implementors["anyhow"] = [{"text":"impl DoubleEndedIterator for <a class=\"struct\" href=\"anyhow/struct.Chain.html\" title=\"struct anyhow::Chain\">Chain</a>&lt;'_&gt;","synthetic":false,"types":["anyhow::Chain"]}];
implementors["enumset"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"enumset/trait.EnumSetType.html\" title=\"trait enumset::EnumSetType\">EnumSetType</a>&gt; DoubleEndedIterator for <a class=\"struct\" href=\"enumset/struct.EnumSetIter.html\" title=\"struct enumset::EnumSetIter\">EnumSetIter</a>&lt;T&gt;","synthetic":false,"types":["enumset::EnumSetIter"]}];
implementors["heapless"] = [{"text":"impl&lt;'a, T, const N:&nbsp;usize&gt; DoubleEndedIterator for <a class=\"struct\" href=\"heapless/spsc/struct.Iter.html\" title=\"struct heapless::spsc::Iter\">Iter</a>&lt;'a, T, N&gt;","synthetic":false,"types":["heapless::spsc::Iter"]},{"text":"impl&lt;'a, T, const N:&nbsp;usize&gt; DoubleEndedIterator for <a class=\"struct\" href=\"heapless/spsc/struct.IterMut.html\" title=\"struct heapless::spsc::IterMut\">IterMut</a>&lt;'a, T, N&gt;","synthetic":false,"types":["heapless::spsc::IterMut"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()